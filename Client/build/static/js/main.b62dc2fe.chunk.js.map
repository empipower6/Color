{"version":3,"sources":["Color.js","App.js","serviceWorker.js","index.js"],"names":["Color","props","closed","bind","state","color","lock","animate","TweenMax","fromTo","this","opacity","marginTop","color2","setState","fetch","result","json","data","setTimeout","prompt","colorJson","keyColor","color1","method","headers","body","JSON","stringify","alert","mode","console","log","update","className","ref","div","onClick","style","backgroundColor","React","Component","App","col1","col2","render","empty","key","colors","colorChange","colorAdded","arrayModified","updateArray","firstinput","createRef","secondinput","maxKey","map","push","first","second","e","target","name","value","el","type","onChange","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b62dc2fe.chunk.js","sourcesContent":["import React from 'react';\nimport './Color.css';\nimport { TweenMax } from \"gsap\";\n\nclass Color extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.closed=this.closed.bind(this);\n    this.state={color:\"black\",lock:this.props.lock};\n    this.lock = this.lock.bind(this);\n    this.animate= null;\n  }\n\n  componentDidMount(){\n\n    TweenMax.fromTo(this.animate,1,{opacity:\"0\",marginTop:\"20vw\"},{opacity:\"1\",marginTop:\"0vw\"});\n\n    if(this.props.color2 === \"black\" ){\n\n       this.setState({color:\"white\"});\n    }\n\n\n\n\n  }\n\n  async lock(){\n\n    const result = await fetch(`/ps`);\n    const data = await result.json();\n\n    setTimeout(()=>{\n\n      let answer= prompt(\"Enter the maggiiiic keeey\");\n\n      if(answer === data[0][\"password\"]){\n\n        this.setState({lock:!this.state.lock});\n        let colorJson= {\n          \"key\":this.props.keyColor,\n          \"color1\" :this.props.color1,\n          \"color2\" :this.props.color2,\n          \"lock\":this.state.lock\n\n        }\n\n           fetch(`/updateColor`,{\n              method:'POST',\n              headers: {\n             'Content-Type': 'application/json'\n         },\n              body: JSON.stringify(colorJson)})\n        }\n\n      else{\n\n          alert(\"Magic word not correct\");\n      }\n\n\n  },100);\n\n\n}\n\n  async closed(){\n   if(!this.state.lock){\n    let colorJson= {\n      \"key\":this.props.keyColor,\n      \"color1\" :this.props.color1,\n      \"color2\" :this.props.color2,\n      \"lock\":this.state.lock\n\n    }\n\n       fetch(`/deletecolor`,{\n          method:'POST',\n          mode: 'cors',\n          headers: {\n         'Content-Type': 'application/json'\n     },\n          body: JSON.stringify(colorJson)})\n        setTimeout(()=>{console.log(\"Done\");this.props.update();}, 200);\n  }\n  else{\n     alert(\"You can't delete the color without unlocking it!\");\n  }\n}\n\n  render(){\n    return(\n\n      <div className=\"each-color-composition\" ref={div => this.animate = div} >\n         <div className=\"lock\" onClick={this.lock} style={{color:this.state.color}}>{this.state.lock?\"locked\":\"unlocked\"}</div>\n         <div className=\"close\" onClick={this.closed} style={{color:this.state.color}}> X </div>\n        <div className=\"left-compose\" style={{backgroundColor:this.props.color1}}>\n        </div>\n        <div className=\"right-compose\" style={{backgroundColor:this.props.color2}}>\n        </div>\n\n      </div>\n\n    )\n  }\n\n\n}\n\n\nexport default Color;\n","import React,{ createRef } from 'react';\nimport './App.css';\nimport Color from './Color.js';\nimport \"./Color.css\";\nimport { TweenMax } from 'gsap/all';\n\nclass App extends React.Component {\n  constructor(props) {\n     super(props);\n     this.state={col1:\"\",col2:\"\",render:false,empty:\"\",key:0};\n     this.colors = [];\n     this.colorChange = this.colorChange.bind(this);\n     this.colorAdded = this.colorAdded.bind(this);\n     this.arrayModified = this.arrayModified.bind(this);\n     this.updateArray = this.updateArray.bind(this);\n     this.firstinput= createRef();\n     this.secondinput =createRef();\n}\n\n  async updateArray(){\n\n    this.colors=[];\n    const result = await fetch(`/color`);\n    const data = await result.json();\n    this.arrayModified(data);\n    this.setState({render:true});\n  }\n  arrayModified(data){\n    let maxKey=0;\n  data.map(({key,color1,color2,lock})=>{\n     (key>maxKey)? maxKey=key : maxKey=maxKey;\n     this.colors.push({key:key,first:color1,second:color2,lock:lock});//********\n  });\n    maxKey+=1;\n    this.setState({key:maxKey});\n\n}\n\n  componentDidMount(){\n\n    this.updateArray();\n    if(process.env.NODE_ENV === 'production') {\n     console.log(\"It's production\");\n      } else {\n        console.log(\"It's development\");\n     }\n\n\n}\n\n  colorChange(e){\n\n        this.setState({[e.target.name]:e.target.value});\n\n  }\n\n async colorAdded(e){\n\n   let colorJson= {\n    \"key\":this.state.key,\n   \t\"color1\" :this.state.col1,//******\n   \t\"color2\" :this.state.col2,\n    \"lock\" :false\n\n   }\n\n   this.setState({key:this.state.key+1});\n\n      fetch(`/newcolor`,{\n         method:'POST',\n         headers: {\n        'Content-Type': 'application/json'\n    },\n         body: JSON.stringify(colorJson)})\n\n    setTimeout(()=>{console.log(\"Done\");this.updateArray()}, 100);\n    this.firstinput.value=\"\";\n    this.secondinput.value=\"\";\n\n\n  }\n\n  render(){\n     return(\n\n       <div className=\"biggerPicture\">\n\n       <div className=\"pickcolor\">\n       <label className=\"firstlabel\"> First: <input className=\"firstlabel-input\" ref={el => this.firstinput = el} name=\"col1\" type=\"text\" onChange={this.colorChange}  /> </label>\n       <label className=\"secondlabel\"> Second: <input className=\"secondlabel-input\" ref={el => this.secondinput = el} type=\"reset\" name=\"col2\" type=\"text\"  onChange={this.colorChange}  /> </label>\n       <button className=\"button\" onClick={this.colorAdded}>Add Color</button>\n       </div>\n       {this.colors.map(({key,first,second,lock})=>(\n            <Color keyColor={key} color1={first} color2={second} lock={lock} update={this.updateArray} />\n        )\n      )}\n\n      </div>\n\n\n      );\n\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}