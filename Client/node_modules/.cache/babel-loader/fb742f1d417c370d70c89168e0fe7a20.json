{"ast":null,"code":"var _jsxFileName = \"/Users/emrekelleci/Desktop/color/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Color from './Color.js';\nimport \"./Color.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      col1: \"\",\n      col2: \"\",\n      render: false,\n      empty: \"\"\n    };\n    this.colors = [];\n    this.colorChange = this.colorChange.bind(this);\n    this.colorAdded = this.colorAdded.bind(this);\n    this.arrayModified = this.arrayModified.bind(this);\n    this.updateArray = this.updateArray.bind(this);\n  }\n\n  async updateArray() {\n    this.colors = [];\n    const result = await fetch(`http://localhost:4000/color`);\n    const data = await result.json();\n    this.arrayModified(data);\n    this.setState({\n      render: true\n    });\n  }\n\n  arrayModified(data) {\n    data.map(({\n      color1,\n      color2\n    }) => {\n      this.colors.push({\n        first: color1,\n        second: color2\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateArray();\n  }\n\n  colorChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async colorAdded(e) {\n    let colorJson = {\n      \"color1\": this.state.col1,\n      \"color2\": this.state.col2\n    };\n    fetch(`http://localhost:4000/newcolor`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(colorJson)\n    });\n    setTimeout(() => {\n      console.log(\"Done\");\n      this.updateArray();\n    }, 100);\n    this.firstLabel.value = \"emre\";\n  }\n\n  render() {\n    console.log(this.colors);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"biggerPicture\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pickcolor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"firstlabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 8\n      }\n    }, \" First: \", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"firstlabel-input\",\n      value: this.state.empty,\n      name: \"col1\",\n      type: \"text\",\n      onChange: this.colorChange,\n      ref: this.firstLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 46\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"secondlabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 8\n      }\n    }, \" Second: \", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"secondlabel-input\",\n      value: this.state.empty,\n      name: \"col2\",\n      type: \"text\",\n      onChange: this.colorChange,\n      ref: this.secondlabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 48\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.colorAdded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }\n    }, \"Click me\")), this.colors.map(({\n      first,\n      second,\n      index\n    }) => /*#__PURE__*/React.createElement(Color, {\n      key: first,\n      color1: first,\n      color2: second,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/emrekelleci/Desktop/color/src/App.js"],"names":["React","Color","App","Component","constructor","props","state","col1","col2","render","empty","colors","colorChange","bind","colorAdded","arrayModified","updateArray","result","fetch","data","json","setState","map","color1","color2","push","first","second","componentDidMount","e","target","name","value","colorJson","method","headers","body","JSON","stringify","setTimeout","console","log","firstLabel","secondlabel","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Color from './Color.js';\nimport \"./Color.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n     super(props);\n     this.state={col1:\"\",col2:\"\",render:false,empty:\"\"};\n     this.colors = [];\n     this.colorChange = this.colorChange.bind(this);\n     this.colorAdded = this.colorAdded.bind(this);\n     this.arrayModified = this.arrayModified.bind(this);\n     this.updateArray = this.updateArray.bind(this);\n\n}\n\n  async updateArray(){\n\n    this.colors=[];\n    const result = await fetch(`http://localhost:4000/color`);\n    const data = await result.json();\n    this.arrayModified(data);\n    this.setState({render:true});\n  }\n  arrayModified(data){\n\n  data.map(({color1,color2})=>{\n\n     this.colors.push({first:color1,second:color2});\n  });\n\n}\n  componentDidMount(){\n\n    this.updateArray();\n\n}\n\n  colorChange(e){\n\n        this.setState({[e.target.name]:e.target.value});\n\n  }\n\n async colorAdded(e){\n\n   let colorJson= {\n   \t\"color1\" :this.state.col1,\n   \t\"color2\" :this.state.col2\n\n   }\n\n      fetch(`http://localhost:4000/newcolor`,{\n         method:'POST',\n         headers: {\n        'Content-Type': 'application/json'\n    },\n         body: JSON.stringify(colorJson)})\n\n    setTimeout(()=>{console.log(\"Done\");this.updateArray()}, 100);\n\n    this.firstLabel.value= \"emre\";\n\n  }\n\n  render(){\n    console.log(this.colors);\n     return(\n\n       <div className=\"biggerPicture\">\n       <div className=\"pickcolor\">\n       <label className=\"firstlabel\"> First: <input className=\"firstlabel-input\" value={this.state.empty} name=\"col1\" type=\"text\" onChange={this.colorChange} ref={this.firstLabel} /> </label>\n       <label className=\"secondlabel\"> Second: <input className=\"secondlabel-input\" value={this.state.empty} name=\"col2\" type=\"text\"  onChange={this.colorChange} ref={this.secondlabel} /> </label>\n       <button className=\"button\" onClick={this.colorAdded}>Click me</button>\n       </div>\n       {this.colors.map(({first,second,index})=>(\n            <Color key={first} color1={first} color2={second} />\n        )\n      )}\n      </div>\n      );\n\n }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}